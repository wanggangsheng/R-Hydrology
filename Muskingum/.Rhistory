library(rEDM)
library(solve2dlp)
library(intpoint)
install.packages(intpoint)
install.packages("intpoint")
c=c(3,2)
M1=c(2,-1)
bM1=-2
m1=c(1,2)
bm1=8
solve2dlp(t=1, m=m1, bm=bm1, M=M1, bM=bM1, c=c, z=0, ip=0)
clear()
clc()
clr()
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),,)
rbind(c(1,2,3),c(4,5,6))
rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
B
N
Binv <-  solve(B)
Binv
## double check
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
b <- t(c(80,100,40))
B
N
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
A <- cbind(B,N)
cB <- c(3,2,0)
cN <- c(0,0)
b <- t(c(80,100,40))
B
N
A
b
t(N)
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
print("Shadow Prices:")
cB %*% Binv
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- prices %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
## invert matrix B using the solve function
Binv <-  solve(B)
Binv
## double check
Binv %*% B
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
obj
install.packages("lpSolve")
require(lpSolve)
C <- c(30, 40, 80)
# Create constraint martix B
A <- matrix(c(1, 1, -10,
4, 3, -20,
1, 0, -2,
1, 1, 0), nrow=4, byrow=TRUE)
# Right hand side for the constraints
B <- c(500, 200, 100, 1000)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=", ">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
best_sol <- optimum$solution
names(best_sol) <- c("x_4p", "x_3p", "x_w")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
rm(optimum, constranints_direction, best_sol)
A
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
# Find the optimal solution
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
A
best_sol <- optimum$solution
names(best_sol) <- c("x1", "x2")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
compute.sens = 1,
all.int = F)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
Saturation_Vapor_Pressure <- function(Temperature) {
T <- Temperature
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
SatVP <- function(T) {
## T: air temperature [Â°C]
## SatVP: saturation vapor pressure [kPa]
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
satvp <- Saturation_Vapor_Pressure(40)
satvp
PotRad <- function(Lat, DOY){
## PotRad [MJ m-2 d -1]: potential extraterrestrial radiation
Solar_Constant <- 118.08
Lat_Rad <- Lat * pi / 180
dr <- 1 + 0.033 * cos(2 * pi * DOY / 365)
SolDec <- 0.409 * sin(2 * pi * DOY / 365 - 1.39)
SunsetHourAngle <- acos(-tan(Lat_Rad) * tan(SolDec))
Term <- SunsetHourAngle * sin(Lat_Rad) * sin(SolDec)
+ cos(Lat_Rad) * cos(SolDec) * sin(SunsetHourAngle)
PotRad <- Solar_Constant * dr * Term / pi
}
pot_rad <- PotRad(12.525, 135)
pot_rad
0.409 * sin(2 * pi * (135 - 80) / 365)
library(ggplot2)
library(ggpubr) #ggscatter, stat_cor
library(scales) #as.POSIXct, date_format
#Clean up Environment
rm(list = ls())
## Please change the following to your own Working Directory
setwd("/Users/wgs/ownCloud/Rcode/Hydrology/Muskingum")
##-----------------------------------------------------------------------------
Muskingum_Routing <- function(dt, K, X, I1, I2, O1){
C0 <- dt/K + 2*(1-X)
C1 <- (dt/K + 2*X)/C0
C2 <- (dt/K - 2*X)/C0
C3 <- 1 - C1 -C2
O2 <- C1*I1 + C2*I2 + C3*O1
Muskingum_Routing <- list(C0=C0, coef=c(C1,C2,C3),Outflow2=O2)
}
##-----------------------------------------------------------------------------
R2 <- function(obs,sim){
obs_mean <- mean(obs)
R2 <-  1-sum((sim-obs)^2)/sum((obs-obs_mean)^2)
}
##-----------------------------------------------------------------------------
## dt: time interval
## K: storage constant
## X: weighting factor
## O2 = C1*I1 + C2*I2 + C3*O1
##-----------------------------------------------------------------------------
## derive K and X from C1/C2/C3
## Let Y = dt/K
## C1 + C2 = 2Y/C0
## C1 - C2 = 4X/C0
## a = Y/(2X) = (C1 + C2)/(C1 - C2)
## X = C1/[a + 1 - C1*(a - 1)]
## Y = 2aX
## K = dt/Y
##-----------------------------------------------------------------------------
path <- getwd()
file0 <- "Routing_input.txt"
file0 <- paste0(path,"/", file0)
## read input data from file0
df0 <- read.table(file0, sep="\t",header=TRUE)
names(df0)
head(df0)
dt <- 1
Klimit <- c(0.01, 10)
Xlimit <- c(0, 0.5)
nt <- nrow(df0)
df <- df0[2:nt,]
colnames(df) <- c("Time","Inflow2", "Outflow2")
df$Inflow1 <- df0$Inflow[1:(nt-1)]
df$Outflow1 <- df0$Outflow[1:(nt-1)]
df <- df[,c("Time","Inflow1","Inflow2","Outflow1","Outflow2")]
df$Outflow2 <- df$Outflow2 + runif(nt-1, min=-50, max=50)
model <- lm(Outflow2 ~ 0 + Inflow1 + Inflow2 + Outflow1, df)
summary(model)
coef <- as.numeric(model$coefficients)
sum(coef)
