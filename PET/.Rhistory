library(rEDM)
library(solve2dlp)
library(intpoint)
install.packages(intpoint)
install.packages("intpoint")
c=c(3,2)
M1=c(2,-1)
bM1=-2
m1=c(1,2)
bm1=8
solve2dlp(t=1, m=m1, bm=bm1, M=M1, bM=bM1, c=c, z=0, ip=0)
clear()
clc()
clr()
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),,)
rbind(c(1,2,3),c(4,5,6))
rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
B
N
Binv <-  solve(B)
Binv
## double check
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
b <- t(c(80,100,40))
B
N
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
A <- cbind(B,N)
cB <- c(3,2,0)
cN <- c(0,0)
b <- t(c(80,100,40))
B
N
A
b
t(N)
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
print("Shadow Prices:")
cB %*% Binv
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- prices %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
## invert matrix B using the solve function
Binv <-  solve(B)
Binv
## double check
Binv %*% B
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
obj
install.packages("lpSolve")
require(lpSolve)
C <- c(30, 40, 80)
# Create constraint martix B
A <- matrix(c(1, 1, -10,
4, 3, -20,
1, 0, -2,
1, 1, 0), nrow=4, byrow=TRUE)
# Right hand side for the constraints
B <- c(500, 200, 100, 1000)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=", ">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
best_sol <- optimum$solution
names(best_sol) <- c("x_4p", "x_3p", "x_w")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
rm(optimum, constranints_direction, best_sol)
A
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
# Find the optimal solution
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
A
best_sol <- optimum$solution
names(best_sol) <- c("x1", "x2")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
compute.sens = 1,
all.int = F)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
Saturation_Vapor_Pressure <- function(Temperature) {
T <- Temperature
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
SatVP <- function(T) {
## T: air temperature [°C]
## SatVP: saturation vapor pressure [kPa]
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
satvp <- Saturation_Vapor_Pressure(40)
satvp
PotRad <- function(Lat, DOY){
## PotRad [MJ m-2 d -1]: potential extraterrestrial radiation
Solar_Constant <- 118.08
Lat_Rad <- Lat * pi / 180
dr <- 1 + 0.033 * cos(2 * pi * DOY / 365)
SolDec <- 0.409 * sin(2 * pi * DOY / 365 - 1.39)
SunsetHourAngle <- acos(-tan(Lat_Rad) * tan(SolDec))
Term <- SunsetHourAngle * sin(Lat_Rad) * sin(SolDec)
+ cos(Lat_Rad) * cos(SolDec) * sin(SunsetHourAngle)
PotRad <- Solar_Constant * dr * Term / pi
}
pot_rad <- PotRad(12.525, 135)
pot_rad
0.409 * sin(2 * pi * (135 - 80) / 365)
install.packages("reservoir")
install.packages("soilwater")
library(soilwater)
soiltype <- c("sand","silty-sand","loam","clay")
theta_sat <- c(0.44,0.39,0.51,0.48)
theta_res <- c(0.02,0.155,0.04,0.10)
alpha <- c(13.8,6.88,9.0,2.7) # 1/meters
n <- c(2.09,1.881,1.42,1.29)
m <- 1-1/n
v <- array(0.5,length(soiltype))
ks <- c(1.5e-1,1e-4*3600,3.3e-2,4.1e-4)/3600
psi <- -(1:2000)/1000
D <- as.data.frame(array(0.1,c(length(psi),length(soiltype))))
names(D) <- soiltype
for (it in names(D)) {
i=which(names(D)==it)
D[,i] <- diffusivity(psi=psi,
v=v[i],ksat=ks[i],alpha=alpha[i],
n=n[i],m=m[i],theta_sat=theta_sat[i],
theta_res=theta_res[i])
}
# plot diffusivity on log scale
lty <- 1:length(names(D) )
plot(psi,D[,1],lty=lty[1],main="Diffusvity vs psi",xlab="psi [m]",
ylab="D [m^2/s]",type="l",ylim=range(D),ylog=TRUE)
for (i in 2:ncol(D)) {
lines(psi,D[,i],lty=lty[i])
}
legend("topleft",lty=lty,legend=names(D))
Dinv <- 1/D
# pot diffusivity on log scale
lty <- 1:length(names(D) )
plot(psi,Dinv[,1],lty=lty[1],main="1/Diffusvity vs psi",
xlab="psi [m]",ylab="1/D [s/m^2]",type="l",ylim=range(Dinv),ylog=TRUE)
for (i in 2:ncol(Dinv)) {
lines(psi,Dinv[,i],lty=lty[i])
}
legend("topright",lty=lty,legend=names(D))
library(ggplot2)
library(ggpubr) #ggscatter, stat_cor
library(scales) #as.POSIXct, date_format
#Clean up Environment
rm(list = ls())
## Please change the following to your own Working Directory
setwd("/Users/wgs/ownCloud/Rcode/R-Hydrology/PET")
## All functions are included in "PET.R"
source("PET.R")
path <- getwd()
Latitude <- 46.74 ## degrees
Altitude <- 758   ## [m]
WindHeight <- 10  ## [m]
albedo <- 0.23
file0 <- "PET_input.txt"
file0 <- paste0(path,"/", file0)
## read input data from file0
df0 <- read.table(file0, sep="\t",header=TRUE)
names(df0)
head(df0)
temp1 <- seq(from=0, to=61, by=1)
es1 <- SatVP(temp1)
df_es <- data.frame(temp1, es1)
df_Es
df_es
ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
# scale_x_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
xlab1 <- bquote(bold("Temperature (°C)"))
ylab1 <- bquote(bold("Saturation vapor pressure (kPa)"))
ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
# scale_x_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
size_axis <- 20
size_title <- size_axis+2
size_regression <- size_axis/3
ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
# scale_x_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
sp1 <- ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
# scale_x_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
sp1 <- ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
xlim1 <-c (0, 60)
## scatter plot
sp1 <- ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
xlim1 <-c (0, 60)
## scatter plot
sp1 <- ggscatter(df_es, x="temp1",y="es1") +
# coord_cartesian(xlim=ylim1, ylim=ylim1) +
geom_line(size=1, color="red") +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
sp1 <- ggscatter(df_es, x="temp1",y="es1", shape = 1, color = "blue") +
geom_line(size=1, color="red") +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
sp1 <- ggscatter(df_es, x="temp1",y="es1", shape=1, size=2, color="blue") +
geom_line(size=1, color="red") +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
sp1 <- ggscatter(df_es, x="temp1",y="es1", shape=1, size=5, color="blue") +
geom_line(size=1, color="red") +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
sp1 <- ggscatter(df_es, x="temp1",y="es1", shape=1, size=3, color="blue") +
geom_line(size=1, color="red") +
scale_x_continuous(breaks=seq(xlim1[1],xlim1[2],10)) +
# scale_y_continuous(breaks=seq(ylim1[1],ylim1[2],2)) +
xlab(xlab1) +
ylab(ylab1) +
theme(
axis.text=element_text(size=size_axis),
axis.title=element_text(size=size_title,face="bold")
)
print(sp1)
fn1 <- paste0(path,"/SatVP-Temp.pdf")
ggsave(filename=fn1, plot=sp1,width=30,height=30,units="cm", dpi=600)
temp1 <- vector(mode="numeric", length=61)
es1 <- vector(mode="numeric", length=61)
temp1
es1
for(i in 0:61) {
temp1[i] <- i
es1[i] <- SatVP(temp1[i])
}
temp1
for(i in 61) {
temp1[i] <- i - 1
es1[i] <- SatVP(temp1[i])
}
temp1
temp1 <- seq(from=0, to=61, by=1)
temp1
temp1 <- seq(from=0, to=60, by=1)
es1 <- SatVP(temp1)
df_es <- data.frame(temp1, es1)
df_es
temp1 <- vector(mode="numeric", length=61)
es1 <- vector(mode="numeric", length=61)
for(i in 61) {
temp1[i] <- i - 1
es1[i] <- SatVP(temp1[i])
}
temp1
es1
for(i in 1:61) {
temp1[i] <- i - 1
es1[i] <- SatVP(temp1[i])
}
temp1
es1
temp1 <- vector(mode="numeric", length=61)
es1 <- vector(mode="numeric", length=61)
for(i in 0:60) {
temp1[i] <- i
es1[i] <- SatVP(temp1[i])
}
temp1
temp1 <- vector(mode="numeric", length=61)
es1 <- vector(mode="numeric", length=61)
for(i in 1:61) {
temp1[i] <- i - 1
es1[i] <- SatVP(temp1[i])
}
temp1
es1
