library(rEDM)
library(solve2dlp)
library(intpoint)
install.packages(intpoint)
install.packages("intpoint")
c=c(3,2)
M1=c(2,-1)
bM1=-2
m1=c(1,2)
bm1=8
solve2dlp(t=1, m=m1, bm=bm1, M=M1, bM=bM1, c=c, z=0, ip=0)
clear()
clc()
clr()
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B<-rbind(c(1,1,0),,)
rbind(c(1,2,3),c(4,5,6))
rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
B
Binv <-  solve(B)
Biv
Binv
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
B
N
Binv <-  solve(B)
Binv
## double check
Binv %*% B
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
b <- t(c(80,100,40))
B
N
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
A <- cbind(B,N)
cB <- c(3,2,0)
cN <- c(0,0)
b <- t(c(80,100,40))
B
N
A
b
t(N)
b
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
print("Shadow Prices:")
cB %*% Binv
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- prices %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% t(b)
BasicV
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
B <- rbind(c(1,1,0),c(2,1,0),c(1,0,1))
N <- cbind(c(1,0,0),c(0,1,0))
cB <- c(3,2,0)
cN <- c(0,0)
b <- c(80,100,40)
B
N
b
## invert matrix B using the solve function
Binv <-  solve(B)
Binv
## double check
Binv %*% B
print("Shadow Prices:")
prices <- cB %*% Binv
prices
print("Reduced Costs:")
costs <- cN - prices %*% N
costs
print("Basic Variables:")
BasicV <- Binv %*% b
BasicV
print("Objective Function:")
obj <- prices %*% b
obj
obj
install.packages("lpSolve")
require(lpSolve)
C <- c(30, 40, 80)
# Create constraint martix B
A <- matrix(c(1, 1, -10,
4, 3, -20,
1, 0, -2,
1, 1, 0), nrow=4, byrow=TRUE)
# Right hand side for the constraints
B <- c(500, 200, 100, 1000)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=", ">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
best_sol <- optimum$solution
names(best_sol) <- c("x_4p", "x_3p", "x_w")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
rm(optimum, constranints_direction, best_sol)
A
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
C <- c(3, 2)
# Create constraint martix B
A <- matrix(c(1, 1,
2, 1,
1, 0), nrow=3, byrow=TRUE)
# Right hand side for the constraints
B <- c(80, 100, 40)
# Direction of the constraints
constranints_direction  <- c("<=", "<=", "<=")
# Find the optimal solution
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
all.int = T)
print(optimum$status)
A
best_sol <- optimum$solution
names(best_sol) <- c("x1", "x2")
print(best_sol)
print(paste("Total cost: ", optimum$objval, sep=""))
optimum <-  lp(direction="max",
objective.in = C,
const.mat = A,
const.dir = constranints_direction,
const.rhs = B,
compute.sens = 1,
all.int = F)
optimum$sens.coef.from
optimum$sens.coef.to
optimum$duals
optimum$duals.from
optimum$duals.to
Saturation_Vapor_Pressure <- function(Temperature) {
T <- Temperature
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
SatVP <- function(T) {
## T: air temperature [Â°C]
## SatVP: saturation vapor pressure [kPa]
SatVP <- 0.6108 * exp(17.27 * T / (T + 237.3))
return(SatVP)
}
satvp <- Saturation_Vapor_Pressure(20)
satvp
satvp <- Saturation_Vapor_Pressure(40)
satvp
PotRad <- function(Lat, DOY){
## PotRad [MJ m-2 d -1]: potential extraterrestrial radiation
Solar_Constant <- 118.08
Lat_Rad <- Lat * pi / 180
dr <- 1 + 0.033 * cos(2 * pi * DOY / 365)
SolDec <- 0.409 * sin(2 * pi * DOY / 365 - 1.39)
SunsetHourAngle <- acos(-tan(Lat_Rad) * tan(SolDec))
Term <- SunsetHourAngle * sin(Lat_Rad) * sin(SolDec)
+ cos(Lat_Rad) * cos(SolDec) * sin(SunsetHourAngle)
PotRad <- Solar_Constant * dr * Term / pi
}
pot_rad <- PotRad(12.525, 135)
pot_rad
0.409 * sin(2 * pi * (135 - 80) / 365)
library(ggplot2)
library(ggpubr) #ggscatter, stat_cor
library(scales) #as.POSIXct, date_format
#Clean up Environment
rm(list = ls())
setwd("/Users/wgs/ownCloud/Rcode/Hydrology/Muskingum")
Muskingum_Routing <- function(dt, K, X, I1, I2, O1){
C0 <- dt/K + 2*(1-X)
C1 <- (dt/K + 2*X)/C0
C2 <- (dt/K - 2*X)/C0
C3 <- 1 - C1 -C2
O2 <- C1*I1 + C2*I2 + C3*O1
Muskingum_Routing <- list(C0=C0, coef=c(C1,C2,C3),Outflow2=O2)
}
R2 <- function(obs,sim){
obs_mean <- mean(obs)
R2 <-  1-sum((sim-obs)^2)/sum((obs-obs_mean)^2)
}
df0 <- read.table(file0, sep="\t",header=TRUE)
path <- getwd()
file0 <- "Routing_input.txt"
file0 <- paste0(path,"/", file0)
df0 <- read.table(file0, sep="\t",header=TRUE)
names(df0)
colnames(df0)
head(df0)
dt <- 1
Klimit <- c(0.01, 10)
Xlimit <- c(0, 0.5)
dt <- 1
Klimit <- c(0.01, 10)
Xlimit <- c(0, 0.5)
Klimit
nt <- nrow(df0)
df <- df0[2:nt,]
nt
ncol(df0)
df <- df0[2:nt,]
colnames(df) <- c("Time","Inflow2", "Outflow2")
colnames(df) <- c("Time","Inflow2", "Outflow2")
df <- df0[2:nt,]
df
head(df)
colnames(df) <- c("Time","Inflow2", "Outflow2")
names(df)
df$Inflow1 <- df0$Inflow[1:(nt-1)]
df$Outflow1 <- df0$Outflow[1:(nt-1)]
df <- df[,c("Time","Inflow1","Inflow2","Outflow1","Outflow2")]
df$Inflow1 <- df0$Inflow[1:(nt-1)]
df$Outflow1 <- df0$Outflow[1:(nt-1)]
df <- df[,c("Time","Inflow1","Inflow2","Outflow1","Outflow2")]
nt <- nrow(df0)
ncol(df0)
df <- df0[2:nt,]
colnames(df) <- c("Time","Inflow2", "Outflow2")
df$Inflow1 <- df0$Inflow[1:(nt-1)]
df$Outflow1 <- df0$Outflow[1:(nt-1)]
head(df)
df <- df[,c("Time","Inflow1","Inflow2","Outflow1","Outflow2")]
head(df)
df$Outflow2 <- df$Outflow2
model <- lm(Outflow2 ~ 0 + Inflow1 + Inflow2 + Outflow1, df)
summary(model)
model
coef <- as.numeric(model$coefficients)
model$coefficients
coef
sum(coef)
a <- (coef[1] + coef[2])/(coef[1] - coef[2])
X <- coef[1]/(a+1-coef[1]*(a-1))
Y <- 2*a*X
K <- dt/Y
results <- Muskingum_Routing(dt, K, X, df$Inflow1, df$Inflow2, df$Outflow1)
results
df$Outflow2_sim <- results$Outflow2
results$coef - coef
cor_Model <- cor(df$Outflow2,df$Outflow2_sim)
R2_Model <- R2(df$Outflow2,df$Outflow2_sim)
cor_Model^2
R2_Model
xlab1 <- 'Time (h)'
ylab1 <- bquote(bold("Discharge ") * bold(" ("*m^bold(3) * s ^ bold("-1") * ")"))
legend <- c("Inflow", "Observed Outflow", "Simulated Outflow")
color1 <- c("cornflowerblue", "darkgreen", "red")
size_axis <- 20
size_title <- size_axis+2
size_regression <- size_axis/3
title1 <- bquote(bold("Muskingum Flow Routing"))
sp3 <- ggplot(data = df, aes(x = df$Time)) +
ggtitle(title1) +
xlab(xlab1) + ylab(ylab1) +
geom_line(aes(y = Inflow2, color = legend[1]), size = 1) +
geom_line(aes(y = Outflow2, color = legend[2]), size = 1) +
geom_line(aes(y = Outflow2_sim, color = legend[3]), size = 1) +
geom_point(aes(y = Inflow2, color = legend[1]), size=4, shape=21) +
geom_point(aes(y = Outflow2, color = legend[2]), size=6, shape=21) +
geom_point(aes(y = Outflow2_sim, color = legend[3]), size=4, shape=24) +
# scale_x_datetime(date_break = "2 month", labels = date_format("%m/%d/%y")) +
scale_color_manual(name = "", values = color1) +
guides(col = guide_legend(nrow = 3)) +
theme(
plot.title = element_text(hjust = 0.5, size = size_title, face = "bold"),
plot.subtitle = element_text(
hjust = -0.03,
size = size_title,
face = "bold"
),
strip.text.x = element_blank(),
axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_title, face = "bold"),
legend.text = element_text(size = size_axis),
legend.title = element_blank(),
legend.position = c(0.85, 0.8)
)
print(sp3)
fn3 <- paste0(path, "/Muskingum_Routing.pdf")
ggsave(
filename = fn3,
plot = sp3,
width = 40,
height = 20,
units = "cm",
dpi = 600
)
df$Outflow2 <- df$Outflow2 + runif(nt-1, min=-50, max=50)
model <- lm(Outflow2 ~ 0 + Inflow1 + Inflow2 + Outflow1, df)
summary(model)
coef <- as.numeric(model$coefficients)
sum(coef)
a <- (coef[1] + coef[2])/(coef[1] - coef[2])
X <- coef[1]/(a+1-coef[1]*(a-1))
Y <- 2*a*X
K <- dt/Y
##-----------------------------------------------------------------------------
## validate the Muskingum Method
results <- Muskingum_Routing(dt, K, X, df$Inflow1, df$Inflow2, df$Outflow1)
df$Outflow2_sim <- results$Outflow2
results$coef - coef
cor_Model <- cor(df$Outflow2,df$Outflow2_sim)
R2_Model <- R2(df$Outflow2,df$Outflow2_sim)
cor_Model^2
R2_Model
## Time-Series Plot
xlab1 <- 'Time (h)'
ylab1 <- bquote(bold("Discharge ") * bold(" ("*m^bold(3) * s ^ bold("-1") * ")"))
legend <- c("Inflow", "Observed Outflow", "Simulated Outflow")
color1 <- c("cornflowerblue", "darkgreen", "red")
size_axis <- 20
size_title <- size_axis+2
size_regression <- size_axis/3
title1 <- bquote(bold("Muskingum Flow Routing"))
sp3 <- ggplot(data = df, aes(x = df$Time)) +
ggtitle(title1) +
xlab(xlab1) + ylab(ylab1) +
geom_line(aes(y = Inflow2, color = legend[1]), size = 1) +
geom_line(aes(y = Outflow2, color = legend[2]), size = 1) +
geom_line(aes(y = Outflow2_sim, color = legend[3]), size = 1) +
geom_point(aes(y = Inflow2, color = legend[1]), size=4, shape=21) +
geom_point(aes(y = Outflow2, color = legend[2]), size=6, shape=21) +
geom_point(aes(y = Outflow2_sim, color = legend[3]), size=4, shape=24) +
# scale_x_datetime(date_break = "2 month", labels = date_format("%m/%d/%y")) +
scale_color_manual(name = "", values = color1) +
guides(col = guide_legend(nrow = 3)) +
theme(
plot.title = element_text(hjust = 0.5, size = size_title, face = "bold"),
plot.subtitle = element_text(
hjust = -0.03,
size = size_title,
face = "bold"
),
strip.text.x = element_blank(),
axis.text = element_text(size = size_axis),
axis.title = element_text(size = size_title, face = "bold"),
legend.text = element_text(size = size_axis),
legend.title = element_blank(),
legend.position = c(0.85, 0.8)
)
print(sp3)
fn3 <- paste0(path, "/Muskingum_Routing.pdf")
ggsave(
filename = fn3,
plot = sp3,
width = 40,
height = 20,
units = "cm",
dpi = 600
)
coef
sum(coef)
cor_Model^2
R2_Model
model <- lm(Outflow2 ~ Inflow1 + Inflow2 + Outflow1, df)
# model <- lm(Outflow2 ~ 0 + Inflow1 + Inflow2 + Outflow1, df)
summary(model)
model$coefficients
library(ggplot2)
library(ggpubr) #ggscatter, stat_cor
library(scales) #as.POSIXct, date_format
#Clean up Environment
rm(list = ls())
## Please change the following to your own Working Directory
setwd("/Users/wgs/ownCloud/Rcode/Hydrology/PET")
## All functions are included in "PET.R"
source("PET.R")
path <- getwd()
Latitude <- 46.74 ## degrees
Altitude <- 758   ## [m]
WindHeight <- 10  ## [m]
albedo <- 0.23
file0 <- "PET_input.txt"
file0 <- paste0(path,"/", file0)
## read input data from file0
df0 <- read.table(file0, sep="\t",header=TRUE)
names(df0)
head(df0)
df <- df0
df$Tmean <- 0.5*(df$Tmax + df$Tmin)
df$esTmax <- SatVP(df$Tmax)
df$esTmin <- SatVP(df$Tmin)
df$esTmean <- 0.5*(df$esTmax + df$esTmin)
df$ea <-   VP(df$Tmax, df$Tmin, df$RHmean, df$RHmean)
df$VPD <- VPD(df$Tmax, df$Tmin, df$RHmean, df$RHmean)
## inverse relative distance from Earth to Sun
df$DR <- InvDistance(df$DOY)
## solar declination
df$SolDec <- SolarDec(df$DOY)
## sunset hour angle
df$SunsetAngle <- SunsetHourAngle(Latitude,df$DOY)
## aerodynamic resistance
df$ra <- AeroRes(df$WindSpeed,WindHeight)
## slope of saturation vapor pressure curve
df$Delta <- DeltaEs(df$Tmax, df$Tmin)
## latent heat of vaporization
df$Lambda <- Lambda(df$Tmax, df$Tmin)
## psychrometrric constant
df$Gamma <- Gamma(Altitude, df$Tmax, df$Tmin)
## potential extraterrestrail radiation
df$PotRad <- PotRad(Latitude,df$DOY)
## shortsave net radiation
df$NetRad <- NetRad(albedo, Latitude, Altitude,
df$DOY, df$SolarRad, df$Tmax, df$Tmin, df$RHmean, df$RHmean)
## reference ET radiation term
df$ETRad <- ETRadTerm(albedo, Latitude, Altitude,
df$DOY, df$SolarRad, df$Tmax, df$Tmin,
df$RHmean, df$RHmean,df$WindSpeed,WindHeight)
## reference ET aerodynamic or wind term
df$ETAero <- ETAeroTerm(Altitude,
df$Tmax, df$Tmin, df$RHmean, df$RHmean,
df$WindSpeed,WindHeight)
##-----------------------------------------------------------------------------
## Penman-Monteith Reference ET
df$ET_PenmanMonteith <- ETPenmanMonteith(albedo, Latitude, Altitude,
df$DOY, df$SolarRad, df$Tmax, df$Tmin,
df$RHmean, df$RHmean,df$WindSpeed,WindHeight)
##-----------------------------------------------------------------------------
## Hargreaves Reference ET
df$ET_Hargreaves <- ETHargreaves(Latitude,df$DOY, df$Tmax, df$Tmin)
##-----------------------------------------------------------------------------
## Priestley-Taylor Reference ET
## Alfa ranging from 1.26 to 1.70
alfa <- 1.26
df$ET_PriestleyTaylor <- ETPriestleyTaylor(alfa,albedo, Latitude, Altitude,
df$DOY, df$SolarRad, df$Tmax, df$Tmin,
df$RHmean, df$RHmean)
##-----------------------------------------------------------------------------
size_axis <- 20
size_title <- size_axis+2
size_regression <- size_axis/3
## ET_PenmanMonteith vs. ET_PriestleyTaylor
cor1 <- cor(df$ET_PenmanMonteith,df$ET_PriestleyTaylor)
R2v <- R2(df$ET_PenmanMonteith,df$ET_PriestleyTaylor)
cor1
cor1^2
R2v
